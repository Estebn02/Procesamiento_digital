# -*- coding: utf-8 -*-
"""prueba_finalproce.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ofsjMmlYIOSz9q2ItV9uw5x7G8yfXg-L

# Fernanda Bravo
# Esteban Gomez
"""

import skimage.io as io
import numpy as np
import matplotlib.pylab as plt
from skimage.morphology import (dilation,erosion, closing, opening, disk, square)
from skimage.exposure import (histogram,equalize_hist , adjust_gamma,adjust_log) #
from skimage.filters import (gaussian, sobel, median, inverse)#gausiano bordes

img = io.imread("https://github.com/jorgevergara/PDI/blob/main/image_aerial.png?raw=true")

#Descargar la imagen image_aerial.png desde el repositorio https://github.com/jorgevergara/PDI/blob/main/image_aerial.png
#Links to an external site.y utilice técnicas de procesamiento de imágenes para detectar el camión blanco en la carretera.
img_binaria = img>246
fig, axes = plt.subplots(1, 2, figsize=(15,15))
axes[0].imshow(img, cmap = "gray")
axes[1].imshow(erosion(img_binaria), cmap = "gray")

#2 Utilizando la misma imagen en (1) utilice técnicas de erosión y/o dilatación para eliminar (o atenuar) los autos sobre la carretera.
img2 = img.copy()
fig, axes = plt.subplots(1, 2, figsize=(15, 15))
axes[0].imshow(img, cmap = "gray")
axes[1].imshow(dilation(img2), cmap = "gray")

#3 Obtenga el histograma en cada canal (en cada uno de los 3 colores RGB) de la imagen parrot
img3 = io.imread("https://github.com/jorgevergara/PDI/blob/main/parrot.png?raw=true")
plt.figure()
plt.imshow(img3)

plt.figure()#ravel los aplana/alpha transparencia
plt.hist(img3[:,:,0].ravel(),bins=256,range=(0,255),color="r",alpha=0.3)
plt.hist(img3[:,:,1].ravel(),bins=256,range=(0,255),color="g",alpha=0.3)
plt.hist(img3[:,:,2].ravel(),bins=256,range=(0,255),color="b",alpha=0.3)

#4 Elimine los indicadores de minutos de la imagen clock2 https://github.com/jorgevergara/PDI/blob/main/clock2.jpg Links to an external site.  mediante estrategias de apertura y/o cerrado.
img4 = io.imread("https://github.com/jorgevergara/PDI/blob/main/clock2.jpg?raw=true", as_gray=True)

img4_binaria = img4>0.45
img4_opening = opening(img4_binaria, square(3))

fig, ax = plt.subplots(1,2,figsize=(10,15))
ax[0].imshow(img4, cmap = "gray")
ax[1].imshow(img4_opening,cmap='gray')

#5 Encuentre un umbral óptimo para dejar solo a la gaviota en la imagen sea_bird.jpg
img5 = io.imread("https://github.com/jorgevergara/PDI/blob/main/sea_bird.jpg?raw=true", as_gray=True)
plt.imshow(img5, cmap='gray')

img5_copia = img5.copy()
img_eq = equalize_hist(img5_copia)

img_sobel = sobel(img_eq)
img_op = opening(img_sobel,square(1))
img_op[270:768,:] = 0
plt.imshow(img_op,cmap ='gray')

fig, axes = plt.subplots(1, 2, figsize=(10, 10))
axes[0].imshow(img_eq, cmap = "gray")
axes[1].imshow(dilation(img_op), cmap = "binary")

#6 Elimine la gaviota de la imagen anterior. Para ello utilice el negativo de la imagen binarizada y multiple con la imagen original.
#Por otro lado, multiple la imagen binarizada por una imagen con el color promedio de la imagen original. Luego sume ambas imágenes
imgx = img5.copy()
imgx[40:255,230:675] = np.average(img5[1,670])
prom = np.average(imgx[0:255,0:750])
imgx[40:255,230:675] = prom
prom = np.average(imgx[0:255,0:750])

fig, axes = plt.subplots(1,2,figsize=(15,15))
axes[0].imshow(img_eq, cmap="gray")
axes[1].imshow(opening(sobel(imgx)),cmap='binary')

im = imgx+img5
plt.imshow(imgx,cmap ='gray')